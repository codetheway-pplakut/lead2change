// <auto-generated />
using System;
using Lead2Change.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lead2Change.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210816154852_SqlMigration")]
    partial class SqlMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lead2Change.Domain.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InterviewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.AppEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppEvents");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.CareerDeclaration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CareerCluster")
                        .HasColumnType("int");

                    b.Property<bool>("CollegeBound")
                        .HasColumnType("bit");

                    b.Property<string>("SpecificCareer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TechnicalCollegeBound")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CareerDeclarations");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CoachEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoachFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoachLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoachPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGoalSet")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GoalReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoalSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WasItAccomplished")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InterviewName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.QuestionInInterview", b =>
                {
                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("InterviewId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionInInterviews");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ACTTestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ACTTestScore")
                        .HasColumnType("int");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmedForcesBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ArmedForcesStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("AssistanceForForms")
                        .HasColumnType("bit");

                    b.Property<Guid>("CareerDeclarationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CareerDeclarationId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CareerPathList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CollegeApplicationStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("CollegeEssayHelp")
                        .HasColumnType("bit");

                    b.Property<bool>("CollegeEssayStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CollegesList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<string>("DiscussWithGuidanceCounselor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FinancialAidProcessComplete")
                        .HasColumnType("bit");

                    b.Property<string>("FirstChoiceCollege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuidanceCounselorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowOftenMeetWithGuidanceCounselor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KnowGuidanceCounselor")
                        .HasColumnType("bit");

                    b.Property<bool>("MeetWithGuidanceCounselor")
                        .HasColumnType("bit");

                    b.Property<string>("OtherPlans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PACTTestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PACTTestScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("PSATTestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PSATTestScore")
                        .HasColumnType("int");

                    b.Property<string>("ParentApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentHomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ParentSignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanAfterHighSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrepClassRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SATTestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SATTestScore")
                        .HasColumnType("int");

                    b.Property<string>("SecondChoiceCollege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCareerInterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCareerPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentHomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentSignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportNeeded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdChoiceCollege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TradeSchoolStatus")
                        .HasColumnType("bit");

                    b.Property<string>("TradeSchoolsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WorkStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CareerDeclarationId1");

                    b.HasIndex("CoachId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.AspNetRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AspNetRoles");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.AspNetUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<Guid>("AssociatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("AspNetUsers");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Goal", b =>
                {
                    b.HasOne("Lead2Change.Domain.Models.Student", null)
                        .WithMany("Goals")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Question", b =>
                {
                    b.HasOne("Lead2Change.Domain.Models.Interview", null)
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.QuestionInInterview", b =>
                {
                    b.HasOne("Lead2Change.Domain.Models.Interview", "Interview")
                        .WithMany("QuestionInInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lead2Change.Domain.Models.Question", "Question")
                        .WithMany("QuestionInInterviews")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lead2Change.Domain.Models.Student", b =>
                {
                    b.HasOne("Lead2Change.Domain.Models.CareerDeclaration", "CareerDeclaration")
                        .WithMany()
                        .HasForeignKey("CareerDeclarationId1");

                    b.HasOne("Lead2Change.Domain.Models.Coach", null)
                        .WithMany("Students")
                        .HasForeignKey("CoachId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
